const Word=function(){const e={};function t(){fetch("../../assets/google10000English.txt").then(e=>e.text()).then(n)}function n(t){const n=t.split("\n").filter(e=>e.length>3),r=Math.floor(Math.random()*n.length);o.randomWord=n[r],e.wordContainer.textContent=n[r].shuffle()}String.prototype.shuffle=function(){let e=this.split("");for(let t=e.length-1;t>0;t--){let n=Math.floor(Math.random()*(t+1)),o=e[t];e[t]=e[n],e[n]=o}return e.join("")};const o={init:function(){e.wordContainer=document.querySelector(".game__word"),t()},getWords:t};return o}(),Score=function(){let e=0;const t={};function n(){t.score__span.textContent=`Score: ${e}`}return{init:function(){t.score__span=document.querySelector(".game__score")},increaseScore:function(){e++,n()},decreaseScore:function(){e--,n()}}}(),Outcome=function(){let e=3;const t={};const n={init:function(){t.outcome_p=document.querySelector(".game__paragraph")},win:function(){t.outcome_p.textContent="Bravo!"},decreaseChances:function(){e--,n.chances=e,t.outcome_p.textContent=e<1?`You lose! The word was ${Word.randomWord}`:`You wrong! ${e} chances left...`},resetChances:function(){e=3,n.chances=3},resetMessage:function(){t.outcome_p.textContent="Guess the word..."}};return n}(),Game=function(){const e={};function t(t){t.preventDefault(),e.guessInput.value===Word.randomWord?(Outcome.win(),Score.increaseScore(),setTimeout(()=>{Word.getWords(),Outcome.resetChances(),Outcome.resetMessage()},2e3)):(Outcome.decreaseChances(),0===Outcome.chances&&(Score.decreaseScore(),setTimeout(()=>{Word.getWords(),Outcome.resetChances(),Outcome.resetMessage()},3e3))),e.guessInput.value=""}return{init:function(){e.form=document.getElementById("guess-form"),e.guessInput=document.querySelector(".guess-form__input"),e.form.addEventListener("submit",t)}}}();document.addEventListener("DOMContentLoaded",()=>{Word.init(),Game.init(),Score.init(),Outcome.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
